{"version":3,"file":"auth.service.d.ts","sources":["auth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { Auth0Client, RedirectLoginOptions, PopupLoginOptions, PopupConfigOptions, LogoutOptions, GetTokenSilentlyOptions, GetTokenWithPopupOptions, RedirectLoginResult, LogoutUrlOptions, GetTokenSilentlyVerboseResponse, GetUserOptions, User, GetIdTokenClaimsOptions, IdToken } from '@auth0/auth0-spa-js';\nimport { Observable } from 'rxjs';\nimport { AbstractNavigator } from './abstract-navigator';\nimport { AuthClientConfig, AppState } from './auth.config';\nimport { AuthState } from './auth.state';\nexport declare class AuthService<TAppState extends AppState = AppState> implements OnDestroy {\n    private auth0Client;\n    private configFactory;\n    private navigator;\n    private authState;\n    private appStateSubject$;\n    private ngUnsubscribe$;\n    /**\n     * Emits boolean values indicating the loading state of the SDK.\n     */\n    readonly isLoading$: Observable<boolean>;\n    /**\n     * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n     * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n     */\n    readonly isAuthenticated$: Observable<boolean>;\n    /**\n     * Emits details about the authenticated user, or null if not authenticated.\n     */\n    readonly user$: Observable<User | null | undefined>;\n    /**\n     * Emits ID token claims when authenticated, or null if not authenticated.\n     */\n    readonly idTokenClaims$: Observable<IdToken | null | undefined>;\n    /**\n     * Emits errors that occur during login, or when checking for an active session on startup.\n     */\n    readonly error$: Observable<Error>;\n    /**\n     * Emits the value (if any) that was passed to the `loginWithRedirect` method call\n     * but only **after** `handleRedirectCallback` is first called\n     */\n    readonly appState$: Observable<TAppState>;\n    constructor(auth0Client: Auth0Client, configFactory: AuthClientConfig, navigator: AbstractNavigator, authState: AuthState);\n    /**\n     * Called when the service is destroyed\n     */\n    ngOnDestroy(): void;\n    /**\n     * ```js\n     * loginWithRedirect(options);\n     * ```\n     *\n     * Performs a redirect to `/authorize` using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated.\n     *\n     * @param options The login options\n     */\n    loginWithRedirect(options?: RedirectLoginOptions<TAppState>): Observable<void>;\n    /**\n     * ```js\n     * await loginWithPopup(options);\n     * ```\n     *\n     * Opens a popup with the `/authorize` URL using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated. If the response is successful,\n     * results will be valid according to their expiration times.\n     *\n     * IMPORTANT: This method has to be called from an event handler\n     * that was started by the user like a button click, for example,\n     * otherwise the popup will be blocked in most browsers.\n     *\n     * @param options The login options\n     * @param config Configuration for the popup window\n     */\n    loginWithPopup(options?: PopupLoginOptions, config?: PopupConfigOptions): Observable<void>;\n    /**\n     * ```js\n     * logout();\n     * ```\n     *\n     * Clears the application session and performs a redirect to `/v2/logout`, using\n     * the parameters provided as arguments, to clear the Auth0 session.\n     * If the `federated` option is specified it also clears the Identity Provider session.\n     * If the `localOnly` option is specified, it only clears the application session.\n     * It is invalid to set both the `federated` and `localOnly` options to `true`,\n     * and an error will be thrown if you do.\n     * [Read more about how Logout works at Auth0](https://auth0.com/docs/logout).\n     *\n     * @param options The logout options\n     */\n    logout(options?: LogoutOptions): void;\n    /**\n     * Fetches a new access token and returns the response from the /oauth/token endpoint, omitting the refresh token.\n     *\n     * @param options The options for configuring the token fetch.\n     */\n    getAccessTokenSilently(options: GetTokenSilentlyOptions & {\n        detailedResponse: true;\n    }): Observable<GetTokenSilentlyVerboseResponse>;\n    /**\n     * Fetches a new access token and returns it.\n     *\n     * @param options The options for configuring the token fetch.\n     */\n    getAccessTokenSilently(options?: GetTokenSilentlyOptions): Observable<string>;\n    /**\n     * ```js\n     * getTokenWithPopup(options).subscribe(token => ...)\n     * ```\n     *\n     * Get an access token interactively.\n     *\n     * Opens a popup with the `/authorize` URL using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated. If the response is successful,\n     * results will be valid according to their expiration times.\n     */\n    getAccessTokenWithPopup(options?: GetTokenWithPopupOptions): Observable<string>;\n    /**\n     * ```js\n     * getUser(options).subscribe(user => ...);\n     * ```\n     *\n     * Returns the user information if available (decoded\n     * from the `id_token`).\n     *\n     * If you provide an audience or scope, they should match an existing Access Token\n     * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n     * scope and audience to look up the ID Token)\n     *\n     * @remarks\n     *\n     * The returned observable will emit once and then complete.\n     *\n     * @typeparam TUser The type to return, has to extend {@link User}.\n     * @param options The options to get the user\n     */\n    getUser<TUser extends User>(options?: GetUserOptions): Observable<TUser | undefined>;\n    /**\n     * ```js\n     * getIdTokenClaims(options).subscribe(claims => ...);\n     * ```\n     *\n     * Returns all claims from the id_token if available.\n     *\n     * If you provide an audience or scope, they should match an existing Access Token\n     * (the SDK stores a corresponding ID Token with every Access Token, and uses the\n     * scope and audience to look up the ID Token)\n     *\n     * @remarks\n     *\n     * The returned observable will emit once and then complete.\n     *\n     * @param options The options to get the Id token claims\n     */\n    getIdTokenClaims(options?: GetIdTokenClaimsOptions): Observable<IdToken | undefined>;\n    /**\n     * ```js\n     * handleRedirectCallback(url).subscribe(result => ...)\n     * ```\n     *\n     * After the browser redirects back to the callback page,\n     * call `handleRedirectCallback` to handle success and error\n     * responses from Auth0. If the response is successful, results\n     * will be valid according to their expiration times.\n     *\n     * Calling this method also refreshes the authentication and user states.\n     *\n     * @param url The URL to that should be used to retrieve the `state` and `code` values. Defaults to `window.location.href` if not given.\n     */\n    handleRedirectCallback(url?: string): Observable<RedirectLoginResult<TAppState>>;\n    /**\n     * ```js\n     * buildAuthorizeUrl().subscribe(url => ...)\n     * ```\n     *\n     * Builds an `/authorize` URL for loginWithRedirect using the parameters\n     * provided as arguments. Random and secure `state` and `nonce`\n     * parameters will be auto-generated.\n     * @param options The options\n     * @returns A URL to the authorize endpoint\n     */\n    buildAuthorizeUrl(options?: RedirectLoginOptions): Observable<string>;\n    /**\n     * ```js\n     * buildLogoutUrl().subscribe(url => ...)\n     * ```\n     * Builds a URL to the logout endpoint.\n     *\n     * @param options The options used to configure the parameters that appear in the logout endpoint URL.\n     * @returns a URL to the logout endpoint using the parameters provided as arguments.\n     */\n    buildLogoutUrl(options?: LogoutUrlOptions): Observable<string>;\n    private shouldHandleCallback;\n}\n"]}