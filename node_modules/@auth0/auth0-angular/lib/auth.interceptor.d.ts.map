{"version":3,"file":"auth.interceptor.d.ts","sources":["auth.interceptor.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthClientConfig } from './auth.config';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nimport { AuthState } from './auth.state';\nexport declare class AuthHttpInterceptor implements HttpInterceptor {\n    private configFactory;\n    private auth0Client;\n    private authState;\n    constructor(configFactory: AuthClientConfig, auth0Client: Auth0Client, authState: AuthState);\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n    /**\n     * Duplicate of AuthService.getAccessTokenSilently, but with a slightly different error handling.\n     * Only used internally in the interceptor.\n     * @param options The options for configuring the token fetch.\n     */\n    private getAccessTokenSilently;\n    /**\n     * Strips the query and fragment from the given uri\n     * @param uri The uri to remove the query and fragment from\n     */\n    private stripQueryFrom;\n    /**\n     * Determines whether the specified route can have an access token attached to it, based on matching the HTTP request against\n     * the interceptor route configuration.\n     * @param route The route to test\n     * @param request The HTTP request\n     */\n    private canAttachToken;\n    /**\n     * Tries to match a route from the SDK configuration to the HTTP request.\n     * If a match is found, the route configuration is returned.\n     * @param request The Http request\n     * @param config HttpInterceptorConfig\n     */\n    private findMatchingRoute;\n    private allowAnonymous;\n}\n"]}