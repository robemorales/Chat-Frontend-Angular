{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\HP\\\\Documents\\\\chat\\\\Deploy\\\\Chat-Frontend-Angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr';\nimport { MessageDTO } from '../DTO/MessageDTO';\nimport { Subject } from 'rxjs';\nimport { environment } from './../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ChatService = /*#__PURE__*/(() => {\n  class ChatService {\n    constructor(http) {\n      var _this = this;\n\n      this.http = http;\n      this.connection = new signalR.HubConnectionBuilder().withUrl(environment.hubConnectionURL).configureLogging(signalR.LogLevel.Information).build();\n      this.POST_URL = environment.broadcastURL;\n      this.receivedMessageObject = new MessageDTO();\n      this.sharedOdj = new Subject();\n      this.connection.onclose( /*#__PURE__*/_asyncToGenerator(function* () {\n        yield _this.start();\n      }));\n      this.connection.on(\"ReciveOne\", (user, message) => {\n        this.mapReceivedMessage(user, message);\n      });\n      this.start();\n    }\n\n    start() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this2.connection.start();\n          console.log(\"connected super connected\");\n        } catch (err) {\n          console.log(err);\n          setTimeout(() => _this2.start(), 5000);\n        }\n      })();\n    }\n\n    mapReceivedMessage(user, message) {\n      this.receivedMessageObject.user = user;\n      this.receivedMessageObject.msgText = message;\n      this.sharedOdj.next(this.receivedMessageObject);\n    }\n\n    broadcastMessage(msgDTO) {\n      this.http.post(this.POST_URL, msgDTO).subscribe(data => console.log(data));\n    }\n\n    retrieveMappedObject() {\n      return this.sharedOdj.asObservable();\n    }\n\n  }\n\n  ChatService.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatService;\n})();","map":null,"metadata":{},"sourceType":"module"}