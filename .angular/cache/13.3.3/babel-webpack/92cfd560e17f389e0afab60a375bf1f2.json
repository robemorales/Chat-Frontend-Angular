{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\HP\\\\Documents\\\\chat\\\\Deploy\\\\Chat-Frontend-Angular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { Subject } from \"./Subject\";\nimport { Arg, getErrorString, Platform } from \"./Utils\";\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\n/** Describes the current state of the {@link HubConnection} to the server. */\n\nexport var HubConnectionState;\n\n(function (HubConnectionState) {\n  /** The hub connection is disconnected. */\n  HubConnectionState[\"Disconnected\"] = \"Disconnected\";\n  /** The hub connection is connecting. */\n\n  HubConnectionState[\"Connecting\"] = \"Connecting\";\n  /** The hub connection is connected. */\n\n  HubConnectionState[\"Connected\"] = \"Connected\";\n  /** The hub connection is disconnecting. */\n\n  HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\n  /** The hub connection is reconnecting. */\n\n  HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\n})(HubConnectionState || (HubConnectionState = {}));\n/** Represents a connection to a SignalR Hub. */\n\n\nexport class HubConnection {\n  constructor(connection, logger, protocol, reconnectPolicy) {\n    this._nextKeepAlive = 0;\n\n    this._freezeEventListener = () => {\n      this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\n    };\n\n    Arg.isRequired(connection, \"connection\");\n    Arg.isRequired(logger, \"logger\");\n    Arg.isRequired(protocol, \"protocol\");\n    this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\n    this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\n    this._logger = logger;\n    this._protocol = protocol;\n    this.connection = connection;\n    this._reconnectPolicy = reconnectPolicy;\n    this._handshakeProtocol = new HandshakeProtocol();\n\n    this.connection.onreceive = data => this._processIncomingData(data);\n\n    this.connection.onclose = error => this._connectionClosed(error);\n\n    this._callbacks = {};\n    this._methods = {};\n    this._closedCallbacks = [];\n    this._reconnectingCallbacks = [];\n    this._reconnectedCallbacks = [];\n    this._invocationId = 0;\n    this._receivedHandshakeResponse = false;\n    this._connectionState = HubConnectionState.Disconnected;\n    this._connectionStarted = false;\n    this._cachedPingMessage = this._protocol.writeMessage({\n      type: MessageType.Ping\n    });\n  }\n  /** @internal */\n  // Using a public static factory method means we can have a private constructor and an _internal_\n  // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\n  // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\n  // public parameter-less constructor.\n\n\n  static create(connection, logger, protocol, reconnectPolicy) {\n    return new HubConnection(connection, logger, protocol, reconnectPolicy);\n  }\n  /** Indicates the state of the {@link HubConnection} to the server. */\n\n\n  get state() {\n    return this._connectionState;\n  }\n  /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n   *  in the disconnected state or if the negotiation step was skipped.\r\n   */\n\n\n  get connectionId() {\n    return this.connection ? this.connection.connectionId || null : null;\n  }\n  /** Indicates the url of the {@link HubConnection} to the server. */\n\n\n  get baseUrl() {\n    return this.connection.baseUrl || \"\";\n  }\n  /**\r\n   * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n   * Reconnecting states.\r\n   * @param {string} url The url to connect to.\r\n   */\n\n\n  set baseUrl(url) {\n    if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\n      throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\n    }\n\n    if (!url) {\n      throw new Error(\"The HubConnection url must be a valid url.\");\n    }\n\n    this.connection.baseUrl = url;\n  }\n  /** Starts the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n   */\n\n\n  start() {\n    this._startPromise = this._startWithStateTransitions();\n    return this._startPromise;\n  }\n\n  _startWithStateTransitions() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this._connectionState !== HubConnectionState.Disconnected) {\n        return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\n      }\n\n      _this._connectionState = HubConnectionState.Connecting;\n\n      _this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\n\n      try {\n        yield _this._startInternal();\n\n        if (Platform.isBrowser) {\n          // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\n          window.document.addEventListener(\"freeze\", _this._freezeEventListener);\n        }\n\n        _this._connectionState = HubConnectionState.Connected;\n        _this._connectionStarted = true;\n\n        _this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\n      } catch (e) {\n        _this._connectionState = HubConnectionState.Disconnected;\n\n        _this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\n\n        return Promise.reject(e);\n      }\n    })();\n  }\n\n  _startInternal() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2._stopDuringStartError = undefined;\n      _this2._receivedHandshakeResponse = false; // Set up the promise before any connection is (re)started otherwise it could race with received messages\n\n      const handshakePromise = new Promise((resolve, reject) => {\n        _this2._handshakeResolver = resolve;\n        _this2._handshakeRejecter = reject;\n      });\n      yield _this2.connection.start(_this2._protocol.transferFormat);\n\n      try {\n        const handshakeRequest = {\n          protocol: _this2._protocol.name,\n          version: _this2._protocol.version\n        };\n\n        _this2._logger.log(LogLevel.Debug, \"Sending handshake request.\");\n\n        yield _this2._sendMessage(_this2._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\n\n        _this2._logger.log(LogLevel.Information, `Using HubProtocol '${_this2._protocol.name}'.`); // defensively cleanup timeout in case we receive a message from the server before we finish start\n\n\n        _this2._cleanupTimeout();\n\n        _this2._resetTimeoutPeriod();\n\n        _this2._resetKeepAliveInterval();\n\n        yield handshakePromise; // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\n        // being rejected on close, because this continuation can run after both the handshake completed successfully\n        // and the connection was closed.\n\n        if (_this2._stopDuringStartError) {\n          // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\n          // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\n          // will cause the calling continuation to get scheduled to run later.\n          // eslint-disable-next-line @typescript-eslint/no-throw-literal\n          throw _this2._stopDuringStartError;\n        }\n      } catch (e) {\n        _this2._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\n\n        _this2._cleanupTimeout();\n\n        _this2._cleanupPingTimer(); // HttpConnection.stop() should not complete until after the onclose callback is invoked.\n        // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\n\n\n        yield _this2.connection.stop(e);\n        throw e;\n      }\n    })();\n  }\n  /** Stops the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n   */\n\n\n  stop() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // Capture the start promise before the connection might be restarted in an onclose callback.\n      const startPromise = _this3._startPromise;\n      _this3._stopPromise = _this3._stopInternal();\n      yield _this3._stopPromise;\n\n      try {\n        // Awaiting undefined continues immediately\n        yield startPromise;\n      } catch (e) {// This exception is returned to the user as a rejected Promise from the start method.\n      }\n    })();\n  }\n\n  _stopInternal(error) {\n    if (this._connectionState === HubConnectionState.Disconnected) {\n      this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\n\n      return Promise.resolve();\n    }\n\n    if (this._connectionState === HubConnectionState.Disconnecting) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n\n      return this._stopPromise;\n    }\n\n    this._connectionState = HubConnectionState.Disconnecting;\n\n    this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\n\n    if (this._reconnectDelayHandle) {\n      // We're in a reconnect delay which means the underlying connection is currently already stopped.\n      // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\n      // fire the onclose callbacks.\n      this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\n\n      clearTimeout(this._reconnectDelayHandle);\n      this._reconnectDelayHandle = undefined;\n\n      this._completeClose();\n\n      return Promise.resolve();\n    }\n\n    this._cleanupTimeout();\n\n    this._cleanupPingTimer();\n\n    this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\"); // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\n    // or the onclose callback is invoked. The onclose callback will transition the HubConnection\n    // to the disconnected state if need be before HttpConnection.stop() completes.\n\n    return this.connection.stop(error);\n  }\n  /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n   *\r\n   * @typeparam T The type of the items returned by the server.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n   */\n\n\n  stream(methodName, ...args) {\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n\n    const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds); // eslint-disable-next-line prefer-const\n\n\n    let promiseQueue;\n    const subject = new Subject();\n\n    subject.cancelCallback = () => {\n      const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\n\n      delete this._callbacks[invocationDescriptor.invocationId];\n      return promiseQueue.then(() => {\n        return this._sendWithProtocol(cancelInvocation);\n      });\n    };\n\n    this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\n      if (error) {\n        subject.error(error);\n        return;\n      } else if (invocationEvent) {\n        // invocationEvent will not be null when an error is not passed to the callback\n        if (invocationEvent.type === MessageType.Completion) {\n          if (invocationEvent.error) {\n            subject.error(new Error(invocationEvent.error));\n          } else {\n            subject.complete();\n          }\n        } else {\n          subject.next(invocationEvent.item);\n        }\n      }\n    };\n\n    promiseQueue = this._sendWithProtocol(invocationDescriptor).catch(e => {\n      subject.error(e);\n      delete this._callbacks[invocationDescriptor.invocationId];\n    });\n\n    this._launchStreams(streams, promiseQueue);\n\n    return subject;\n  }\n\n  _sendMessage(message) {\n    this._resetKeepAliveInterval();\n\n    return this.connection.send(message);\n  }\n  /**\r\n   * Sends a js object to the server.\r\n   * @param message The js object to serialize and send.\r\n   */\n\n\n  _sendWithProtocol(message) {\n    return this._sendMessage(this._protocol.writeMessage(message));\n  }\n  /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n   *\r\n   * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n   * be processing the invocation.\r\n   *\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n   */\n\n\n  send(methodName, ...args) {\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n\n    const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\n\n    this._launchStreams(streams, sendPromise);\n\n    return sendPromise;\n  }\n  /** Invokes a hub method on the server using the specified name and arguments.\r\n   *\r\n   * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n   * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n   * resolving the Promise.\r\n   *\r\n   * @typeparam T The expected return type.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n   */\n\n\n  invoke(methodName, ...args) {\n    const [streams, streamIds] = this._replaceStreamingParams(args);\n\n    const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\n\n    const p = new Promise((resolve, reject) => {\n      // invocationId will always have a value for a non-blocking invocation\n      this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\n        if (error) {\n          reject(error);\n          return;\n        } else if (invocationEvent) {\n          // invocationEvent will not be null when an error is not passed to the callback\n          if (invocationEvent.type === MessageType.Completion) {\n            if (invocationEvent.error) {\n              reject(new Error(invocationEvent.error));\n            } else {\n              resolve(invocationEvent.result);\n            }\n          } else {\n            reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\n          }\n        }\n      };\n\n      const promiseQueue = this._sendWithProtocol(invocationDescriptor).catch(e => {\n        reject(e); // invocationId will always have a value for a non-blocking invocation\n\n        delete this._callbacks[invocationDescriptor.invocationId];\n      });\n\n      this._launchStreams(streams, promiseQueue);\n    });\n    return p;\n  }\n  /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n   *\r\n   * @param {string} methodName The name of the hub method to define.\r\n   * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n   */\n\n\n  on(methodName, newMethod) {\n    if (!methodName || !newMethod) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n\n    if (!this._methods[methodName]) {\n      this._methods[methodName] = [];\n    } // Preventing adding the same handler multiple times.\n\n\n    if (this._methods[methodName].indexOf(newMethod) !== -1) {\n      return;\n    }\n\n    this._methods[methodName].push(newMethod);\n  }\n\n  off(methodName, method) {\n    if (!methodName) {\n      return;\n    }\n\n    methodName = methodName.toLowerCase();\n    const handlers = this._methods[methodName];\n\n    if (!handlers) {\n      return;\n    }\n\n    if (method) {\n      const removeIdx = handlers.indexOf(method);\n\n      if (removeIdx !== -1) {\n        handlers.splice(removeIdx, 1);\n\n        if (handlers.length === 0) {\n          delete this._methods[methodName];\n        }\n      }\n    } else {\n      delete this._methods[methodName];\n    }\n  }\n  /** Registers a handler that will be invoked when the connection is closed.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n   */\n\n\n  onclose(callback) {\n    if (callback) {\n      this._closedCallbacks.push(callback);\n    }\n  }\n  /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n   */\n\n\n  onreconnecting(callback) {\n    if (callback) {\n      this._reconnectingCallbacks.push(callback);\n    }\n  }\n  /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n   */\n\n\n  onreconnected(callback) {\n    if (callback) {\n      this._reconnectedCallbacks.push(callback);\n    }\n  }\n\n  _processIncomingData(data) {\n    this._cleanupTimeout();\n\n    if (!this._receivedHandshakeResponse) {\n      data = this._processHandshakeResponse(data);\n      this._receivedHandshakeResponse = true;\n    } // Data may have all been read when processing handshake response\n\n\n    if (data) {\n      // Parse the messages\n      const messages = this._protocol.parseMessages(data, this._logger);\n\n      for (const message of messages) {\n        switch (message.type) {\n          case MessageType.Invocation:\n            this._invokeClientMethod(message);\n\n            break;\n\n          case MessageType.StreamItem:\n          case MessageType.Completion:\n            {\n              const callback = this._callbacks[message.invocationId];\n\n              if (callback) {\n                if (message.type === MessageType.Completion) {\n                  delete this._callbacks[message.invocationId];\n                }\n\n                try {\n                  callback(message);\n                } catch (e) {\n                  this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\n                }\n              }\n\n              break;\n            }\n\n          case MessageType.Ping:\n            // Don't care about pings\n            break;\n\n          case MessageType.Close:\n            {\n              this._logger.log(LogLevel.Information, \"Close message received from server.\");\n\n              const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\n\n              if (message.allowReconnect === true) {\n                // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\n                // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.connection.stop(error);\n              } else {\n                // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\n                this._stopPromise = this._stopInternal(error);\n              }\n\n              break;\n            }\n\n          default:\n            this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\n\n            break;\n        }\n      }\n    }\n\n    this._resetTimeoutPeriod();\n  }\n\n  _processHandshakeResponse(data) {\n    let responseMessage;\n    let remainingData;\n\n    try {\n      [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\n    } catch (e) {\n      const message = \"Error parsing handshake response: \" + e;\n\n      this._logger.log(LogLevel.Error, message);\n\n      const error = new Error(message);\n\n      this._handshakeRejecter(error);\n\n      throw error;\n    }\n\n    if (responseMessage.error) {\n      const message = \"Server returned handshake error: \" + responseMessage.error;\n\n      this._logger.log(LogLevel.Error, message);\n\n      const error = new Error(message);\n\n      this._handshakeRejecter(error);\n\n      throw error;\n    } else {\n      this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\n    }\n\n    this._handshakeResolver();\n\n    return remainingData;\n  }\n\n  _resetKeepAliveInterval() {\n    if (this.connection.features.inherentKeepAlive) {\n      return;\n    } // Set the time we want the next keep alive to be sent\n    // Timer will be setup on next message receive\n\n\n    this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\n\n    this._cleanupPingTimer();\n  }\n\n  _resetTimeoutPeriod() {\n    var _this4 = this;\n\n    if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n      // Set the timeout timer\n      this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds); // Set keepAlive timer if there isn't one\n\n      if (this._pingServerHandle === undefined) {\n        let nextPing = this._nextKeepAlive - new Date().getTime();\n\n        if (nextPing < 0) {\n          nextPing = 0;\n        } // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\n\n\n        this._pingServerHandle = setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n          if (_this4._connectionState === HubConnectionState.Connected) {\n            try {\n              yield _this4._sendMessage(_this4._cachedPingMessage);\n            } catch {\n              // We don't care about the error. It should be seen elsewhere in the client.\n              // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\n              _this4._cleanupPingTimer();\n            }\n          }\n        }), nextPing);\n      }\n    }\n  } // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  serverTimeout() {\n    // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n    // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n  }\n\n  _invokeClientMethod(invocationMessage) {\n    const methods = this._methods[invocationMessage.target.toLowerCase()];\n\n    if (methods) {\n      try {\n        methods.forEach(m => m.apply(this, invocationMessage.arguments));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\n      }\n\n      if (invocationMessage.invocationId) {\n        // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\n        const message = \"Server requested a response, which is not supported in this version of the client.\";\n\n        this._logger.log(LogLevel.Error, message); // We don't want to wait on the stop itself.\n\n\n        this._stopPromise = this._stopInternal(new Error(message));\n      }\n    } else {\n      this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\n    }\n  }\n\n  _connectionClosed(error) {\n    this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`); // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\n\n\n    this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\"); // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\n    // If it has already completed, this should just noop.\n\n    if (this._handshakeResolver) {\n      this._handshakeResolver();\n    }\n\n    this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\n\n    this._cleanupTimeout();\n\n    this._cleanupPingTimer();\n\n    if (this._connectionState === HubConnectionState.Disconnecting) {\n      this._completeClose(error);\n    } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._reconnect(error);\n    } else if (this._connectionState === HubConnectionState.Connected) {\n      this._completeClose(error);\n    } // If none of the above if conditions were true were called the HubConnection must be in either:\n    // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\n    // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\n    //    and potentially continue the reconnect() loop.\n    // 3. The Disconnected state in which case we're already done.\n\n  }\n\n  _completeClose(error) {\n    if (this._connectionStarted) {\n      this._connectionState = HubConnectionState.Disconnected;\n      this._connectionStarted = false;\n\n      if (Platform.isBrowser) {\n        window.document.removeEventListener(\"freeze\", this._freezeEventListener);\n      }\n\n      try {\n        this._closedCallbacks.forEach(c => c.apply(this, [error]));\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\n      }\n    }\n  }\n\n  _reconnect(error) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const reconnectStartTime = Date.now();\n      let previousReconnectAttempts = 0;\n      let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\n\n      let nextRetryDelay = _this5._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\n\n      if (nextRetryDelay === null) {\n        _this5._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\n\n        _this5._completeClose(error);\n\n        return;\n      }\n\n      _this5._connectionState = HubConnectionState.Reconnecting;\n\n      if (error) {\n        _this5._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\n      } else {\n        _this5._logger.log(LogLevel.Information, \"Connection reconnecting.\");\n      }\n\n      if (_this5._reconnectingCallbacks.length !== 0) {\n        try {\n          _this5._reconnectingCallbacks.forEach(c => c.apply(_this5, [error]));\n        } catch (e) {\n          _this5._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\n        } // Exit early if an onreconnecting callback called connection.stop().\n\n\n        if (_this5._connectionState !== HubConnectionState.Reconnecting) {\n          _this5._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\n\n          return;\n        }\n      }\n\n      while (nextRetryDelay !== null) {\n        _this5._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\n\n        yield new Promise(resolve => {\n          _this5._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\n        });\n        _this5._reconnectDelayHandle = undefined;\n\n        if (_this5._connectionState !== HubConnectionState.Reconnecting) {\n          _this5._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\n\n          return;\n        }\n\n        try {\n          yield _this5._startInternal();\n          _this5._connectionState = HubConnectionState.Connected;\n\n          _this5._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\n\n          if (_this5._reconnectedCallbacks.length !== 0) {\n            try {\n              _this5._reconnectedCallbacks.forEach(c => c.apply(_this5, [_this5.connection.connectionId]));\n            } catch (e) {\n              _this5._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${_this5.connection.connectionId}; threw error '${e}'.`);\n            }\n          }\n\n          return;\n        } catch (e) {\n          _this5._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\n\n          if (_this5._connectionState !== HubConnectionState.Reconnecting) {\n            _this5._logger.log(LogLevel.Debug, `Connection moved to the '${_this5._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`); // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\n\n\n            if (_this5._connectionState === HubConnectionState.Disconnecting) {\n              _this5._completeClose();\n            }\n\n            return;\n          }\n\n          retryError = e instanceof Error ? e : new Error(e.toString());\n          nextRetryDelay = _this5._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\n        }\n      }\n\n      _this5._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\n\n      _this5._completeClose();\n    })();\n  }\n\n  _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\n    try {\n      return this._reconnectPolicy.nextRetryDelayInMilliseconds({\n        elapsedMilliseconds,\n        previousRetryCount,\n        retryReason\n      });\n    } catch (e) {\n      this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\n\n      return null;\n    }\n  }\n\n  _cancelCallbacksWithError(error) {\n    const callbacks = this._callbacks;\n    this._callbacks = {};\n    Object.keys(callbacks).forEach(key => {\n      const callback = callbacks[key];\n\n      try {\n        callback(null, error);\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\n      }\n    });\n  }\n\n  _cleanupPingTimer() {\n    if (this._pingServerHandle) {\n      clearTimeout(this._pingServerHandle);\n      this._pingServerHandle = undefined;\n    }\n  }\n\n  _cleanupTimeout() {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle);\n    }\n  }\n\n  _createInvocation(methodName, args, nonblocking, streamIds) {\n    if (nonblocking) {\n      if (streamIds.length !== 0) {\n        return {\n          arguments: args,\n          streamIds,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      } else {\n        return {\n          arguments: args,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      }\n    } else {\n      const invocationId = this._invocationId;\n      this._invocationId++;\n\n      if (streamIds.length !== 0) {\n        return {\n          arguments: args,\n          invocationId: invocationId.toString(),\n          streamIds,\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      } else {\n        return {\n          arguments: args,\n          invocationId: invocationId.toString(),\n          target: methodName,\n          type: MessageType.Invocation\n        };\n      }\n    }\n  }\n\n  _launchStreams(streams, promiseQueue) {\n    if (streams.length === 0) {\n      return;\n    } // Synchronize stream data so they arrive in-order on the server\n\n\n    if (!promiseQueue) {\n      promiseQueue = Promise.resolve();\n    } // We want to iterate over the keys, since the keys are the stream ids\n    // eslint-disable-next-line guard-for-in\n\n\n    for (const streamId in streams) {\n      streams[streamId].subscribe({\n        complete: () => {\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\n        },\n        error: err => {\n          let message;\n\n          if (err instanceof Error) {\n            message = err.message;\n          } else if (err && err.toString) {\n            message = err.toString();\n          } else {\n            message = \"Unknown error\";\n          }\n\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\n        },\n        next: item => {\n          promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\n        }\n      });\n    }\n  }\n\n  _replaceStreamingParams(args) {\n    const streams = [];\n    const streamIds = [];\n\n    for (let i = 0; i < args.length; i++) {\n      const argument = args[i];\n\n      if (this._isObservable(argument)) {\n        const streamId = this._invocationId;\n        this._invocationId++; // Store the stream for later use\n\n        streams[streamId] = argument;\n        streamIds.push(streamId.toString()); // remove stream from args\n\n        args.splice(i, 1);\n      }\n    }\n\n    return [streams, streamIds];\n  }\n\n  _isObservable(arg) {\n    // This allows other stream implementations to just work (like rxjs)\n    return arg && arg.subscribe && typeof arg.subscribe === \"function\";\n  }\n\n  _createStreamInvocation(methodName, args, streamIds) {\n    const invocationId = this._invocationId;\n    this._invocationId++;\n\n    if (streamIds.length !== 0) {\n      return {\n        arguments: args,\n        invocationId: invocationId.toString(),\n        streamIds,\n        target: methodName,\n        type: MessageType.StreamInvocation\n      };\n    } else {\n      return {\n        arguments: args,\n        invocationId: invocationId.toString(),\n        target: methodName,\n        type: MessageType.StreamInvocation\n      };\n    }\n  }\n\n  _createCancelInvocation(id) {\n    return {\n      invocationId: id,\n      type: MessageType.CancelInvocation\n    };\n  }\n\n  _createStreamItemMessage(id, item) {\n    return {\n      invocationId: id,\n      item,\n      type: MessageType.StreamItem\n    };\n  }\n\n  _createCompletionMessage(id, error, result) {\n    if (error) {\n      return {\n        error,\n        invocationId: id,\n        type: MessageType.Completion\n      };\n    }\n\n    return {\n      invocationId: id,\n      result,\n      type: MessageType.Completion\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/HP/Documents/chat/Deploy/Chat-Frontend-Angular/node_modules/@microsoft/signalr/dist/esm/HubConnection.js"],"names":["HandshakeProtocol","MessageType","LogLevel","Subject","Arg","getErrorString","Platform","DEFAULT_TIMEOUT_IN_MS","DEFAULT_PING_INTERVAL_IN_MS","HubConnectionState","HubConnection","constructor","connection","logger","protocol","reconnectPolicy","_nextKeepAlive","_freezeEventListener","_logger","log","Warning","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","onreceive","data","_processIncomingData","onclose","error","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","Disconnected","_connectionStarted","_cachedPingMessage","writeMessage","type","Ping","create","state","connectionId","baseUrl","url","Reconnecting","Error","start","_startPromise","_startWithStateTransitions","Promise","reject","Connecting","Debug","_startInternal","isBrowser","window","document","addEventListener","Connected","e","_stopDuringStartError","undefined","handshakePromise","resolve","_handshakeResolver","_handshakeRejecter","transferFormat","handshakeRequest","name","version","_sendMessage","writeHandshakeRequest","Information","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","stop","startPromise","_stopPromise","_stopInternal","Disconnecting","_reconnectDelayHandle","clearTimeout","_completeClose","stream","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","subject","cancelCallback","cancelInvocation","_createCancelInvocation","invocationId","then","_sendWithProtocol","invocationEvent","Completion","complete","next","item","catch","_launchStreams","message","send","sendPromise","_createInvocation","invoke","p","result","on","newMethod","toLowerCase","indexOf","push","off","method","handlers","removeIdx","splice","length","callback","onreconnecting","onreconnected","_processHandshakeResponse","messages","parseMessages","Invocation","_invokeClientMethod","StreamItem","Close","allowReconnect","responseMessage","remainingData","parseHandshakeResponse","features","inherentKeepAlive","Date","getTime","_timeoutHandle","setTimeout","serverTimeout","_pingServerHandle","nextPing","invocationMessage","methods","target","forEach","m","apply","arguments","_cancelCallbacksWithError","_reconnect","removeEventListener","c","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","toString","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","Object","keys","key","nonblocking","streamId","subscribe","_createCompletionMessage","err","_createStreamItemMessage","i","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation"],"mappings":";AAAA;AACA;AACA,SAASA,iBAAT,QAAkC,qBAAlC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,GAAT,EAAcC,cAAd,EAA8BC,QAA9B,QAA8C,SAA9C;AACA,MAAMC,qBAAqB,GAAG,KAAK,IAAnC;AACA,MAAMC,2BAA2B,GAAG,KAAK,IAAzC;AACA;;AACA,OAAO,IAAIC,kBAAJ;;AACP,CAAC,UAAUA,kBAAV,EAA8B;AAC3B;AACAA,EAAAA,kBAAkB,CAAC,cAAD,CAAlB,GAAqC,cAArC;AACA;;AACAA,EAAAA,kBAAkB,CAAC,YAAD,CAAlB,GAAmC,YAAnC;AACA;;AACAA,EAAAA,kBAAkB,CAAC,WAAD,CAAlB,GAAkC,WAAlC;AACA;;AACAA,EAAAA,kBAAkB,CAAC,eAAD,CAAlB,GAAsC,eAAtC;AACA;;AACAA,EAAAA,kBAAkB,CAAC,cAAD,CAAlB,GAAqC,cAArC;AACH,CAXD,EAWGA,kBAAkB,KAAKA,kBAAkB,GAAG,EAA1B,CAXrB;AAYA;;;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,QAArB,EAA+BC,eAA/B,EAAgD;AACvD,SAAKC,cAAL,GAAsB,CAAtB;;AACA,SAAKC,oBAAL,GAA4B,MAAM;AAC9B,WAAKC,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACkB,OAA1B,EAAmC,sNAAnC;AACH,KAFD;;AAGAhB,IAAAA,GAAG,CAACiB,UAAJ,CAAeT,UAAf,EAA2B,YAA3B;AACAR,IAAAA,GAAG,CAACiB,UAAJ,CAAeR,MAAf,EAAuB,QAAvB;AACAT,IAAAA,GAAG,CAACiB,UAAJ,CAAeP,QAAf,EAAyB,UAAzB;AACA,SAAKQ,2BAAL,GAAmCf,qBAAnC;AACA,SAAKgB,+BAAL,GAAuCf,2BAAvC;AACA,SAAKU,OAAL,GAAeL,MAAf;AACA,SAAKW,SAAL,GAAiBV,QAAjB;AACA,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKa,gBAAL,GAAwBV,eAAxB;AACA,SAAKW,kBAAL,GAA0B,IAAI1B,iBAAJ,EAA1B;;AACA,SAAKY,UAAL,CAAgBe,SAAhB,GAA6BC,IAAD,IAAU,KAAKC,oBAAL,CAA0BD,IAA1B,CAAtC;;AACA,SAAKhB,UAAL,CAAgBkB,OAAhB,GAA2BC,KAAD,IAAW,KAAKC,iBAAL,CAAuBD,KAAvB,CAArC;;AACA,SAAKE,UAAL,GAAkB,EAAlB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,sBAAL,GAA8B,EAA9B;AACA,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,0BAAL,GAAkC,KAAlC;AACA,SAAKC,gBAAL,GAAwB/B,kBAAkB,CAACgC,YAA3C;AACA,SAAKC,kBAAL,GAA0B,KAA1B;AACA,SAAKC,kBAAL,GAA0B,KAAKnB,SAAL,CAAeoB,YAAf,CAA4B;AAAEC,MAAAA,IAAI,EAAE5C,WAAW,CAAC6C;AAApB,KAA5B,CAA1B;AACH;AACD;AACA;AACA;AACA;AACA;;;AACa,SAANC,MAAM,CAACnC,UAAD,EAAaC,MAAb,EAAqBC,QAArB,EAA+BC,eAA/B,EAAgD;AACzD,WAAO,IAAIL,aAAJ,CAAkBE,UAAlB,EAA8BC,MAA9B,EAAsCC,QAAtC,EAAgDC,eAAhD,CAAP;AACH;AACD;;;AACS,MAALiC,KAAK,GAAG;AACR,WAAO,KAAKR,gBAAZ;AACH;AACD;AACJ;AACA;;;AACoB,MAAZS,YAAY,GAAG;AACf,WAAO,KAAKrC,UAAL,GAAmB,KAAKA,UAAL,CAAgBqC,YAAhB,IAAgC,IAAnD,GAA2D,IAAlE;AACH;AACD;;;AACW,MAAPC,OAAO,GAAG;AACV,WAAO,KAAKtC,UAAL,CAAgBsC,OAAhB,IAA2B,EAAlC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACe,MAAPA,OAAO,CAACC,GAAD,EAAM;AACb,QAAI,KAAKX,gBAAL,KAA0B/B,kBAAkB,CAACgC,YAA7C,IAA6D,KAAKD,gBAAL,KAA0B/B,kBAAkB,CAAC2C,YAA9G,EAA4H;AACxH,YAAM,IAAIC,KAAJ,CAAU,wFAAV,CAAN;AACH;;AACD,QAAI,CAACF,GAAL,EAAU;AACN,YAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH;;AACD,SAAKzC,UAAL,CAAgBsC,OAAhB,GAA0BC,GAA1B;AACH;AACD;AACJ;AACA;AACA;;;AACIG,EAAAA,KAAK,GAAG;AACJ,SAAKC,aAAL,GAAqB,KAAKC,0BAAL,EAArB;AACA,WAAO,KAAKD,aAAZ;AACH;;AACKC,EAAAA,0BAA0B,GAAG;AAAA;;AAAA;AAC/B,UAAI,KAAI,CAAChB,gBAAL,KAA0B/B,kBAAkB,CAACgC,YAAjD,EAA+D;AAC3D,eAAOgB,OAAO,CAACC,MAAR,CAAe,IAAIL,KAAJ,CAAU,uEAAV,CAAf,CAAP;AACH;;AACD,MAAA,KAAI,CAACb,gBAAL,GAAwB/B,kBAAkB,CAACkD,UAA3C;;AACA,MAAA,KAAI,CAACzC,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAiC,yBAAjC;;AACA,UAAI;AACA,cAAM,KAAI,CAACC,cAAL,EAAN;;AACA,YAAIvD,QAAQ,CAACwD,SAAb,EAAwB;AACpB;AACAC,UAAAA,MAAM,CAACC,QAAP,CAAgBC,gBAAhB,CAAiC,QAAjC,EAA2C,KAAI,CAAChD,oBAAhD;AACH;;AACD,QAAA,KAAI,CAACuB,gBAAL,GAAwB/B,kBAAkB,CAACyD,SAA3C;AACA,QAAA,KAAI,CAACxB,kBAAL,GAA0B,IAA1B;;AACA,QAAA,KAAI,CAACxB,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAiC,uCAAjC;AACH,OATD,CAUA,OAAOO,CAAP,EAAU;AACN,QAAA,KAAI,CAAC3B,gBAAL,GAAwB/B,kBAAkB,CAACgC,YAA3C;;AACA,QAAA,KAAI,CAACvB,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAkC,gEAA+DO,CAAE,IAAnG;;AACA,eAAOV,OAAO,CAACC,MAAR,CAAeS,CAAf,CAAP;AACH;AApB8B;AAqBlC;;AACKN,EAAAA,cAAc,GAAG;AAAA;;AAAA;AACnB,MAAA,MAAI,CAACO,qBAAL,GAA6BC,SAA7B;AACA,MAAA,MAAI,CAAC9B,0BAAL,GAAkC,KAAlC,CAFmB,CAGnB;;AACA,YAAM+B,gBAAgB,GAAG,IAAIb,OAAJ,CAAY,CAACc,OAAD,EAAUb,MAAV,KAAqB;AACtD,QAAA,MAAI,CAACc,kBAAL,GAA0BD,OAA1B;AACA,QAAA,MAAI,CAACE,kBAAL,GAA0Bf,MAA1B;AACH,OAHwB,CAAzB;AAIA,YAAM,MAAI,CAAC9C,UAAL,CAAgB0C,KAAhB,CAAsB,MAAI,CAAC9B,SAAL,CAAekD,cAArC,CAAN;;AACA,UAAI;AACA,cAAMC,gBAAgB,GAAG;AACrB7D,UAAAA,QAAQ,EAAE,MAAI,CAACU,SAAL,CAAeoD,IADJ;AAErBC,UAAAA,OAAO,EAAE,MAAI,CAACrD,SAAL,CAAeqD;AAFH,SAAzB;;AAIA,QAAA,MAAI,CAAC3D,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAiC,4BAAjC;;AACA,cAAM,MAAI,CAACkB,YAAL,CAAkB,MAAI,CAACpD,kBAAL,CAAwBqD,qBAAxB,CAA8CJ,gBAA9C,CAAlB,CAAN;;AACA,QAAA,MAAI,CAACzD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC8E,WAA1B,EAAwC,sBAAqB,MAAI,CAACxD,SAAL,CAAeoD,IAAK,IAAjF,EAPA,CAQA;;;AACA,QAAA,MAAI,CAACK,eAAL;;AACA,QAAA,MAAI,CAACC,mBAAL;;AACA,QAAA,MAAI,CAACC,uBAAL;;AACA,cAAMb,gBAAN,CAZA,CAaA;AACA;AACA;;AACA,YAAI,MAAI,CAACF,qBAAT,EAAgC;AAC5B;AACA;AACA;AACA;AACA,gBAAM,MAAI,CAACA,qBAAX;AACH;AACJ,OAvBD,CAwBA,OAAOD,CAAP,EAAU;AACN,QAAA,MAAI,CAACjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAkC,oCAAmCO,CAAE,2CAAvE;;AACA,QAAA,MAAI,CAACc,eAAL;;AACA,QAAA,MAAI,CAACG,iBAAL,GAHM,CAIN;AACA;;;AACA,cAAM,MAAI,CAACxE,UAAL,CAAgByE,IAAhB,CAAqBlB,CAArB,CAAN;AACA,cAAMA,CAAN;AACH;AAzCkB;AA0CtB;AACD;AACJ;AACA;AACA;;;AACUkB,EAAAA,IAAI,GAAG;AAAA;;AAAA;AACT;AACA,YAAMC,YAAY,GAAG,MAAI,CAAC/B,aAA1B;AACA,MAAA,MAAI,CAACgC,YAAL,GAAoB,MAAI,CAACC,aAAL,EAApB;AACA,YAAM,MAAI,CAACD,YAAX;;AACA,UAAI;AACA;AACA,cAAMD,YAAN;AACH,OAHD,CAIA,OAAOnB,CAAP,EAAU,CACN;AACH;AAXQ;AAYZ;;AACDqB,EAAAA,aAAa,CAACzD,KAAD,EAAQ;AACjB,QAAI,KAAKS,gBAAL,KAA0B/B,kBAAkB,CAACgC,YAAjD,EAA+D;AAC3D,WAAKvB,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAkC,8BAA6B7B,KAAM,4DAArE;;AACA,aAAO0B,OAAO,CAACc,OAAR,EAAP;AACH;;AACD,QAAI,KAAK/B,gBAAL,KAA0B/B,kBAAkB,CAACgF,aAAjD,EAAgE;AAC5D,WAAKvE,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAkC,+BAA8B7B,KAAM,yEAAtE;;AACA,aAAO,KAAKwD,YAAZ;AACH;;AACD,SAAK/C,gBAAL,GAAwB/B,kBAAkB,CAACgF,aAA3C;;AACA,SAAKvE,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAiC,yBAAjC;;AACA,QAAI,KAAK8B,qBAAT,EAAgC;AAC5B;AACA;AACA;AACA,WAAKxE,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAiC,+DAAjC;;AACA+B,MAAAA,YAAY,CAAC,KAAKD,qBAAN,CAAZ;AACA,WAAKA,qBAAL,GAA6BrB,SAA7B;;AACA,WAAKuB,cAAL;;AACA,aAAOnC,OAAO,CAACc,OAAR,EAAP;AACH;;AACD,SAAKU,eAAL;;AACA,SAAKG,iBAAL;;AACA,SAAKhB,qBAAL,GAA6BrC,KAAK,IAAI,IAAIsB,KAAJ,CAAU,qEAAV,CAAtC,CAvBiB,CAwBjB;AACA;AACA;;AACA,WAAO,KAAKzC,UAAL,CAAgByE,IAAhB,CAAqBtD,KAArB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI8D,EAAAA,MAAM,CAACC,UAAD,EAAa,GAAGC,IAAhB,EAAsB;AACxB,UAAM,CAACC,OAAD,EAAUC,SAAV,IAAuB,KAAKC,uBAAL,CAA6BH,IAA7B,CAA7B;;AACA,UAAMI,oBAAoB,GAAG,KAAKC,uBAAL,CAA6BN,UAA7B,EAAyCC,IAAzC,EAA+CE,SAA/C,CAA7B,CAFwB,CAGxB;;;AACA,QAAII,YAAJ;AACA,UAAMC,OAAO,GAAG,IAAInG,OAAJ,EAAhB;;AACAmG,IAAAA,OAAO,CAACC,cAAR,GAAyB,MAAM;AAC3B,YAAMC,gBAAgB,GAAG,KAAKC,uBAAL,CAA6BN,oBAAoB,CAACO,YAAlD,CAAzB;;AACA,aAAO,KAAKzE,UAAL,CAAgBkE,oBAAoB,CAACO,YAArC,CAAP;AACA,aAAOL,YAAY,CAACM,IAAb,CAAkB,MAAM;AAC3B,eAAO,KAAKC,iBAAL,CAAuBJ,gBAAvB,CAAP;AACH,OAFM,CAAP;AAGH,KAND;;AAOA,SAAKvE,UAAL,CAAgBkE,oBAAoB,CAACO,YAArC,IAAqD,CAACG,eAAD,EAAkB9E,KAAlB,KAA4B;AAC7E,UAAIA,KAAJ,EAAW;AACPuE,QAAAA,OAAO,CAACvE,KAAR,CAAcA,KAAd;AACA;AACH,OAHD,MAIK,IAAI8E,eAAJ,EAAqB;AACtB;AACA,YAAIA,eAAe,CAAChE,IAAhB,KAAyB5C,WAAW,CAAC6G,UAAzC,EAAqD;AACjD,cAAID,eAAe,CAAC9E,KAApB,EAA2B;AACvBuE,YAAAA,OAAO,CAACvE,KAAR,CAAc,IAAIsB,KAAJ,CAAUwD,eAAe,CAAC9E,KAA1B,CAAd;AACH,WAFD,MAGK;AACDuE,YAAAA,OAAO,CAACS,QAAR;AACH;AACJ,SAPD,MAQK;AACDT,UAAAA,OAAO,CAACU,IAAR,CAAcH,eAAe,CAACI,IAA9B;AACH;AACJ;AACJ,KAnBD;;AAoBAZ,IAAAA,YAAY,GAAG,KAAKO,iBAAL,CAAuBT,oBAAvB,EACVe,KADU,CACH/C,CAAD,IAAO;AACdmC,MAAAA,OAAO,CAACvE,KAAR,CAAcoC,CAAd;AACA,aAAO,KAAKlC,UAAL,CAAgBkE,oBAAoB,CAACO,YAArC,CAAP;AACH,KAJc,CAAf;;AAKA,SAAKS,cAAL,CAAoBnB,OAApB,EAA6BK,YAA7B;;AACA,WAAOC,OAAP;AACH;;AACDxB,EAAAA,YAAY,CAACsC,OAAD,EAAU;AAClB,SAAKjC,uBAAL;;AACA,WAAO,KAAKvE,UAAL,CAAgByG,IAAhB,CAAqBD,OAArB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIR,EAAAA,iBAAiB,CAACQ,OAAD,EAAU;AACvB,WAAO,KAAKtC,YAAL,CAAkB,KAAKtD,SAAL,CAAeoB,YAAf,CAA4BwE,OAA5B,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACvB,UAAD,EAAa,GAAGC,IAAhB,EAAsB;AACtB,UAAM,CAACC,OAAD,EAAUC,SAAV,IAAuB,KAAKC,uBAAL,CAA6BH,IAA7B,CAA7B;;AACA,UAAMuB,WAAW,GAAG,KAAKV,iBAAL,CAAuB,KAAKW,iBAAL,CAAuBzB,UAAvB,EAAmCC,IAAnC,EAAyC,IAAzC,EAA+CE,SAA/C,CAAvB,CAApB;;AACA,SAAKkB,cAAL,CAAoBnB,OAApB,EAA6BsB,WAA7B;;AACA,WAAOA,WAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,MAAM,CAAC1B,UAAD,EAAa,GAAGC,IAAhB,EAAsB;AACxB,UAAM,CAACC,OAAD,EAAUC,SAAV,IAAuB,KAAKC,uBAAL,CAA6BH,IAA7B,CAA7B;;AACA,UAAMI,oBAAoB,GAAG,KAAKoB,iBAAL,CAAuBzB,UAAvB,EAAmCC,IAAnC,EAAyC,KAAzC,EAAgDE,SAAhD,CAA7B;;AACA,UAAMwB,CAAC,GAAG,IAAIhE,OAAJ,CAAY,CAACc,OAAD,EAAUb,MAAV,KAAqB;AACvC;AACA,WAAKzB,UAAL,CAAgBkE,oBAAoB,CAACO,YAArC,IAAqD,CAACG,eAAD,EAAkB9E,KAAlB,KAA4B;AAC7E,YAAIA,KAAJ,EAAW;AACP2B,UAAAA,MAAM,CAAC3B,KAAD,CAAN;AACA;AACH,SAHD,MAIK,IAAI8E,eAAJ,EAAqB;AACtB;AACA,cAAIA,eAAe,CAAChE,IAAhB,KAAyB5C,WAAW,CAAC6G,UAAzC,EAAqD;AACjD,gBAAID,eAAe,CAAC9E,KAApB,EAA2B;AACvB2B,cAAAA,MAAM,CAAC,IAAIL,KAAJ,CAAUwD,eAAe,CAAC9E,KAA1B,CAAD,CAAN;AACH,aAFD,MAGK;AACDwC,cAAAA,OAAO,CAACsC,eAAe,CAACa,MAAjB,CAAP;AACH;AACJ,WAPD,MAQK;AACDhE,YAAAA,MAAM,CAAC,IAAIL,KAAJ,CAAW,4BAA2BwD,eAAe,CAAChE,IAAK,EAA3D,CAAD,CAAN;AACH;AACJ;AACJ,OAnBD;;AAoBA,YAAMwD,YAAY,GAAG,KAAKO,iBAAL,CAAuBT,oBAAvB,EAChBe,KADgB,CACT/C,CAAD,IAAO;AACdT,QAAAA,MAAM,CAACS,CAAD,CAAN,CADc,CAEd;;AACA,eAAO,KAAKlC,UAAL,CAAgBkE,oBAAoB,CAACO,YAArC,CAAP;AACH,OALoB,CAArB;;AAMA,WAAKS,cAAL,CAAoBnB,OAApB,EAA6BK,YAA7B;AACH,KA7BS,CAAV;AA8BA,WAAOoB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,EAAE,CAAC7B,UAAD,EAAa8B,SAAb,EAAwB;AACtB,QAAI,CAAC9B,UAAD,IAAe,CAAC8B,SAApB,EAA+B;AAC3B;AACH;;AACD9B,IAAAA,UAAU,GAAGA,UAAU,CAAC+B,WAAX,EAAb;;AACA,QAAI,CAAC,KAAK3F,QAAL,CAAc4D,UAAd,CAAL,EAAgC;AAC5B,WAAK5D,QAAL,CAAc4D,UAAd,IAA4B,EAA5B;AACH,KAPqB,CAQtB;;;AACA,QAAI,KAAK5D,QAAL,CAAc4D,UAAd,EAA0BgC,OAA1B,CAAkCF,SAAlC,MAAiD,CAAC,CAAtD,EAAyD;AACrD;AACH;;AACD,SAAK1F,QAAL,CAAc4D,UAAd,EAA0BiC,IAA1B,CAA+BH,SAA/B;AACH;;AACDI,EAAAA,GAAG,CAAClC,UAAD,EAAamC,MAAb,EAAqB;AACpB,QAAI,CAACnC,UAAL,EAAiB;AACb;AACH;;AACDA,IAAAA,UAAU,GAAGA,UAAU,CAAC+B,WAAX,EAAb;AACA,UAAMK,QAAQ,GAAG,KAAKhG,QAAL,CAAc4D,UAAd,CAAjB;;AACA,QAAI,CAACoC,QAAL,EAAe;AACX;AACH;;AACD,QAAID,MAAJ,EAAY;AACR,YAAME,SAAS,GAAGD,QAAQ,CAACJ,OAAT,CAAiBG,MAAjB,CAAlB;;AACA,UAAIE,SAAS,KAAK,CAAC,CAAnB,EAAsB;AAClBD,QAAAA,QAAQ,CAACE,MAAT,CAAgBD,SAAhB,EAA2B,CAA3B;;AACA,YAAID,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACvB,iBAAO,KAAKnG,QAAL,CAAc4D,UAAd,CAAP;AACH;AACJ;AACJ,KARD,MASK;AACD,aAAO,KAAK5D,QAAL,CAAc4D,UAAd,CAAP;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIhE,EAAAA,OAAO,CAACwG,QAAD,EAAW;AACd,QAAIA,QAAJ,EAAc;AACV,WAAKnG,gBAAL,CAAsB4F,IAAtB,CAA2BO,QAA3B;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,cAAc,CAACD,QAAD,EAAW;AACrB,QAAIA,QAAJ,EAAc;AACV,WAAKlG,sBAAL,CAA4B2F,IAA5B,CAAiCO,QAAjC;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,aAAa,CAACF,QAAD,EAAW;AACpB,QAAIA,QAAJ,EAAc;AACV,WAAKjG,qBAAL,CAA2B0F,IAA3B,CAAgCO,QAAhC;AACH;AACJ;;AACDzG,EAAAA,oBAAoB,CAACD,IAAD,EAAO;AACvB,SAAKqD,eAAL;;AACA,QAAI,CAAC,KAAK1C,0BAAV,EAAsC;AAClCX,MAAAA,IAAI,GAAG,KAAK6G,yBAAL,CAA+B7G,IAA/B,CAAP;AACA,WAAKW,0BAAL,GAAkC,IAAlC;AACH,KALsB,CAMvB;;;AACA,QAAIX,IAAJ,EAAU;AACN;AACA,YAAM8G,QAAQ,GAAG,KAAKlH,SAAL,CAAemH,aAAf,CAA6B/G,IAA7B,EAAmC,KAAKV,OAAxC,CAAjB;;AACA,WAAK,MAAMkG,OAAX,IAAsBsB,QAAtB,EAAgC;AAC5B,gBAAQtB,OAAO,CAACvE,IAAhB;AACI,eAAK5C,WAAW,CAAC2I,UAAjB;AACI,iBAAKC,mBAAL,CAAyBzB,OAAzB;;AACA;;AACJ,eAAKnH,WAAW,CAAC6I,UAAjB;AACA,eAAK7I,WAAW,CAAC6G,UAAjB;AAA6B;AACzB,oBAAMwB,QAAQ,GAAG,KAAKrG,UAAL,CAAgBmF,OAAO,CAACV,YAAxB,CAAjB;;AACA,kBAAI4B,QAAJ,EAAc;AACV,oBAAIlB,OAAO,CAACvE,IAAR,KAAiB5C,WAAW,CAAC6G,UAAjC,EAA6C;AACzC,yBAAO,KAAK7E,UAAL,CAAgBmF,OAAO,CAACV,YAAxB,CAAP;AACH;;AACD,oBAAI;AACA4B,kBAAAA,QAAQ,CAAClB,OAAD,CAAR;AACH,iBAFD,CAGA,OAAOjD,CAAP,EAAU;AACN,uBAAKjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAkC,gCAA+BhD,cAAc,CAAC8D,CAAD,CAAI,EAAnF;AACH;AACJ;;AACD;AACH;;AACD,eAAKlE,WAAW,CAAC6C,IAAjB;AACI;AACA;;AACJ,eAAK7C,WAAW,CAAC8I,KAAjB;AAAwB;AACpB,mBAAK7H,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC8E,WAA1B,EAAuC,qCAAvC;;AACA,oBAAMjD,KAAK,GAAGqF,OAAO,CAACrF,KAAR,GAAgB,IAAIsB,KAAJ,CAAU,wCAAwC+D,OAAO,CAACrF,KAA1D,CAAhB,GAAmFsC,SAAjG;;AACA,kBAAI+C,OAAO,CAAC4B,cAAR,KAA2B,IAA/B,EAAqC;AACjC;AACA;AACA;AACA,qBAAKpI,UAAL,CAAgByE,IAAhB,CAAqBtD,KAArB;AACH,eALD,MAMK;AACD;AACA,qBAAKwD,YAAL,GAAoB,KAAKC,aAAL,CAAmBzD,KAAnB,CAApB;AACH;;AACD;AACH;;AACD;AACI,iBAAKb,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACkB,OAA1B,EAAoC,yBAAwBgG,OAAO,CAACvE,IAAK,GAAzE;;AACA;AAxCR;AA0CH;AACJ;;AACD,SAAKqC,mBAAL;AACH;;AACDuD,EAAAA,yBAAyB,CAAC7G,IAAD,EAAO;AAC5B,QAAIqH,eAAJ;AACA,QAAIC,aAAJ;;AACA,QAAI;AACA,OAACA,aAAD,EAAgBD,eAAhB,IAAmC,KAAKvH,kBAAL,CAAwByH,sBAAxB,CAA+CvH,IAA/C,CAAnC;AACH,KAFD,CAGA,OAAOuC,CAAP,EAAU;AACN,YAAMiD,OAAO,GAAG,uCAAuCjD,CAAvD;;AACA,WAAKjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAiC+D,OAAjC;;AACA,YAAMrF,KAAK,GAAG,IAAIsB,KAAJ,CAAU+D,OAAV,CAAd;;AACA,WAAK3C,kBAAL,CAAwB1C,KAAxB;;AACA,YAAMA,KAAN;AACH;;AACD,QAAIkH,eAAe,CAAClH,KAApB,EAA2B;AACvB,YAAMqF,OAAO,GAAG,sCAAsC6B,eAAe,CAAClH,KAAtE;;AACA,WAAKb,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAiC+D,OAAjC;;AACA,YAAMrF,KAAK,GAAG,IAAIsB,KAAJ,CAAU+D,OAAV,CAAd;;AACA,WAAK3C,kBAAL,CAAwB1C,KAAxB;;AACA,YAAMA,KAAN;AACH,KAND,MAOK;AACD,WAAKb,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAiC,4BAAjC;AACH;;AACD,SAAKY,kBAAL;;AACA,WAAO0E,aAAP;AACH;;AACD/D,EAAAA,uBAAuB,GAAG;AACtB,QAAI,KAAKvE,UAAL,CAAgBwI,QAAhB,CAAyBC,iBAA7B,EAAgD;AAC5C;AACH,KAHqB,CAItB;AACA;;;AACA,SAAKrI,cAAL,GAAsB,IAAIsI,IAAJ,GAAWC,OAAX,KAAuB,KAAKhI,+BAAlD;;AACA,SAAK6D,iBAAL;AACH;;AACDF,EAAAA,mBAAmB,GAAG;AAAA;;AAClB,QAAI,CAAC,KAAKtE,UAAL,CAAgBwI,QAAjB,IAA6B,CAAC,KAAKxI,UAAL,CAAgBwI,QAAhB,CAAyBC,iBAA3D,EAA8E;AAC1E;AACA,WAAKG,cAAL,GAAsBC,UAAU,CAAC,MAAM,KAAKC,aAAL,EAAP,EAA6B,KAAKpI,2BAAlC,CAAhC,CAF0E,CAG1E;;AACA,UAAI,KAAKqI,iBAAL,KAA2BtF,SAA/B,EAA0C;AACtC,YAAIuF,QAAQ,GAAG,KAAK5I,cAAL,GAAsB,IAAIsI,IAAJ,GAAWC,OAAX,EAArC;;AACA,YAAIK,QAAQ,GAAG,CAAf,EAAkB;AACdA,UAAAA,QAAQ,GAAG,CAAX;AACH,SAJqC,CAKtC;;;AACA,aAAKD,iBAAL,GAAyBF,UAAU,iCAAC,aAAY;AAC5C,cAAI,MAAI,CAACjH,gBAAL,KAA0B/B,kBAAkB,CAACyD,SAAjD,EAA4D;AACxD,gBAAI;AACA,oBAAM,MAAI,CAACY,YAAL,CAAkB,MAAI,CAACnC,kBAAvB,CAAN;AACH,aAFD,CAGA,MAAM;AACF;AACA;AACA,cAAA,MAAI,CAACyC,iBAAL;AACH;AACJ;AACJ,SAXkC,GAWhCwE,QAXgC,CAAnC;AAYH;AACJ;AACJ,GAzesB,CA0evB;;;AACAF,EAAAA,aAAa,GAAG;AACZ;AACA;AACA;AACA,SAAK9I,UAAL,CAAgByE,IAAhB,CAAqB,IAAIhC,KAAJ,CAAU,qEAAV,CAArB;AACH;;AACDwF,EAAAA,mBAAmB,CAACgB,iBAAD,EAAoB;AACnC,UAAMC,OAAO,GAAG,KAAK5H,QAAL,CAAc2H,iBAAiB,CAACE,MAAlB,CAAyBlC,WAAzB,EAAd,CAAhB;;AACA,QAAIiC,OAAJ,EAAa;AACT,UAAI;AACAA,QAAAA,OAAO,CAACE,OAAR,CAAiBC,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQ,IAAR,EAAcL,iBAAiB,CAACM,SAAhC,CAAvB;AACH,OAFD,CAGA,OAAOhG,CAAP,EAAU;AACN,aAAKjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAkC,6BAA4BwG,iBAAiB,CAACE,MAAlB,CAAyBlC,WAAzB,EAAuC,iBAAgB1D,CAAE,IAAvH;AACH;;AACD,UAAI0F,iBAAiB,CAACnD,YAAtB,EAAoC;AAChC;AACA,cAAMU,OAAO,GAAG,oFAAhB;;AACA,aAAKlG,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAiC+D,OAAjC,EAHgC,CAIhC;;;AACA,aAAK7B,YAAL,GAAoB,KAAKC,aAAL,CAAmB,IAAInC,KAAJ,CAAU+D,OAAV,CAAnB,CAApB;AACH;AACJ,KAdD,MAeK;AACD,WAAKlG,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACkB,OAA1B,EAAoC,mCAAkCyI,iBAAiB,CAACE,MAAO,UAA/F;AACH;AACJ;;AACD/H,EAAAA,iBAAiB,CAACD,KAAD,EAAQ;AACrB,SAAKb,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAkC,kCAAiC7B,KAAM,2BAA0B,KAAKS,gBAAiB,GAAzH,EADqB,CAErB;;;AACA,SAAK4B,qBAAL,GAA6B,KAAKA,qBAAL,IAA8BrC,KAA9B,IAAuC,IAAIsB,KAAJ,CAAU,+EAAV,CAApE,CAHqB,CAIrB;AACA;;AACA,QAAI,KAAKmB,kBAAT,EAA6B;AACzB,WAAKA,kBAAL;AACH;;AACD,SAAK4F,yBAAL,CAA+BrI,KAAK,IAAI,IAAIsB,KAAJ,CAAU,oEAAV,CAAxC;;AACA,SAAK4B,eAAL;;AACA,SAAKG,iBAAL;;AACA,QAAI,KAAK5C,gBAAL,KAA0B/B,kBAAkB,CAACgF,aAAjD,EAAgE;AAC5D,WAAKG,cAAL,CAAoB7D,KAApB;AACH,KAFD,MAGK,IAAI,KAAKS,gBAAL,KAA0B/B,kBAAkB,CAACyD,SAA7C,IAA0D,KAAKzC,gBAAnE,EAAqF;AACtF;AACA,WAAK4I,UAAL,CAAgBtI,KAAhB;AACH,KAHI,MAIA,IAAI,KAAKS,gBAAL,KAA0B/B,kBAAkB,CAACyD,SAAjD,EAA4D;AAC7D,WAAK0B,cAAL,CAAoB7D,KAApB;AACH,KArBoB,CAsBrB;AACA;AACA;AACA;AACA;;AACH;;AACD6D,EAAAA,cAAc,CAAC7D,KAAD,EAAQ;AAClB,QAAI,KAAKW,kBAAT,EAA6B;AACzB,WAAKF,gBAAL,GAAwB/B,kBAAkB,CAACgC,YAA3C;AACA,WAAKC,kBAAL,GAA0B,KAA1B;;AACA,UAAIpC,QAAQ,CAACwD,SAAb,EAAwB;AACpBC,QAAAA,MAAM,CAACC,QAAP,CAAgBsG,mBAAhB,CAAoC,QAApC,EAA8C,KAAKrJ,oBAAnD;AACH;;AACD,UAAI;AACA,aAAKkB,gBAAL,CAAsB6H,OAAtB,CAA+BO,CAAD,IAAOA,CAAC,CAACL,KAAF,CAAQ,IAAR,EAAc,CAACnI,KAAD,CAAd,CAArC;AACH,OAFD,CAGA,OAAOoC,CAAP,EAAU;AACN,aAAKjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAkC,0CAAyCtB,KAAM,kBAAiBoC,CAAE,IAApG;AACH;AACJ;AACJ;;AACKkG,EAAAA,UAAU,CAACtI,KAAD,EAAQ;AAAA;;AAAA;AACpB,YAAMyI,kBAAkB,GAAGlB,IAAI,CAACmB,GAAL,EAA3B;AACA,UAAIC,yBAAyB,GAAG,CAAhC;AACA,UAAIC,UAAU,GAAG5I,KAAK,KAAKsC,SAAV,GAAsBtC,KAAtB,GAA8B,IAAIsB,KAAJ,CAAU,iDAAV,CAA/C;;AACA,UAAIuH,cAAc,GAAG,MAAI,CAACC,kBAAL,CAAwBH,yBAAyB,EAAjD,EAAqD,CAArD,EAAwDC,UAAxD,CAArB;;AACA,UAAIC,cAAc,KAAK,IAAvB,EAA6B;AACzB,QAAA,MAAI,CAAC1J,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAiC,oGAAjC;;AACA,QAAA,MAAI,CAACgC,cAAL,CAAoB7D,KAApB;;AACA;AACH;;AACD,MAAA,MAAI,CAACS,gBAAL,GAAwB/B,kBAAkB,CAAC2C,YAA3C;;AACA,UAAIrB,KAAJ,EAAW;AACP,QAAA,MAAI,CAACb,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC8E,WAA1B,EAAwC,6CAA4CjD,KAAM,IAA1F;AACH,OAFD,MAGK;AACD,QAAA,MAAI,CAACb,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC8E,WAA1B,EAAuC,0BAAvC;AACH;;AACD,UAAI,MAAI,CAAC5C,sBAAL,CAA4BiG,MAA5B,KAAuC,CAA3C,EAA8C;AAC1C,YAAI;AACA,UAAA,MAAI,CAACjG,sBAAL,CAA4B4H,OAA5B,CAAqCO,CAAD,IAAOA,CAAC,CAACL,KAAF,CAAQ,MAAR,EAAc,CAACnI,KAAD,CAAd,CAA3C;AACH,SAFD,CAGA,OAAOoC,CAAP,EAAU;AACN,UAAA,MAAI,CAACjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAkC,iDAAgDtB,KAAM,kBAAiBoC,CAAE,IAA3G;AACH,SANyC,CAO1C;;;AACA,YAAI,MAAI,CAAC3B,gBAAL,KAA0B/B,kBAAkB,CAAC2C,YAAjD,EAA+D;AAC3D,UAAA,MAAI,CAAClC,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAiC,uFAAjC;;AACA;AACH;AACJ;;AACD,aAAOgH,cAAc,KAAK,IAA1B,EAAgC;AAC5B,QAAA,MAAI,CAAC1J,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC8E,WAA1B,EAAwC,4BAA2B0F,yBAA0B,kBAAiBE,cAAe,MAA7H;;AACA,cAAM,IAAInH,OAAJ,CAAac,OAAD,IAAa;AAC3B,UAAA,MAAI,CAACmB,qBAAL,GAA6B+D,UAAU,CAAClF,OAAD,EAAUqG,cAAV,CAAvC;AACH,SAFK,CAAN;AAGA,QAAA,MAAI,CAAClF,qBAAL,GAA6BrB,SAA7B;;AACA,YAAI,MAAI,CAAC7B,gBAAL,KAA0B/B,kBAAkB,CAAC2C,YAAjD,EAA+D;AAC3D,UAAA,MAAI,CAAClC,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAiC,mFAAjC;;AACA;AACH;;AACD,YAAI;AACA,gBAAM,MAAI,CAACC,cAAL,EAAN;AACA,UAAA,MAAI,CAACrB,gBAAL,GAAwB/B,kBAAkB,CAACyD,SAA3C;;AACA,UAAA,MAAI,CAAChD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC8E,WAA1B,EAAuC,yCAAvC;;AACA,cAAI,MAAI,CAAC3C,qBAAL,CAA2BgG,MAA3B,KAAsC,CAA1C,EAA6C;AACzC,gBAAI;AACA,cAAA,MAAI,CAAChG,qBAAL,CAA2B2H,OAA3B,CAAoCO,CAAD,IAAOA,CAAC,CAACL,KAAF,CAAQ,MAAR,EAAc,CAAC,MAAI,CAACtJ,UAAL,CAAgBqC,YAAjB,CAAd,CAA1C;AACH,aAFD,CAGA,OAAOkB,CAAP,EAAU;AACN,cAAA,MAAI,CAACjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAkC,uDAAsD,MAAI,CAACzC,UAAL,CAAgBqC,YAAa,kBAAiBkB,CAAE,IAAxI;AACH;AACJ;;AACD;AACH,SAbD,CAcA,OAAOA,CAAP,EAAU;AACN,UAAA,MAAI,CAACjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC8E,WAA1B,EAAwC,8CAA6Cb,CAAE,IAAvF;;AACA,cAAI,MAAI,CAAC3B,gBAAL,KAA0B/B,kBAAkB,CAAC2C,YAAjD,EAA+D;AAC3D,YAAA,MAAI,CAAClC,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC0D,KAA1B,EAAkC,4BAA2B,MAAI,CAACpB,gBAAiB,4EAAnF,EAD2D,CAE3D;;;AACA,gBAAI,MAAI,CAACA,gBAAL,KAA0B/B,kBAAkB,CAACgF,aAAjD,EAAgE;AAC5D,cAAA,MAAI,CAACG,cAAL;AACH;;AACD;AACH;;AACD+E,UAAAA,UAAU,GAAGxG,CAAC,YAAYd,KAAb,GAAqBc,CAArB,GAAyB,IAAId,KAAJ,CAAUc,CAAC,CAAC2G,QAAF,EAAV,CAAtC;AACAF,UAAAA,cAAc,GAAG,MAAI,CAACC,kBAAL,CAAwBH,yBAAyB,EAAjD,EAAqDpB,IAAI,CAACmB,GAAL,KAAaD,kBAAlE,EAAsFG,UAAtF,CAAjB;AACH;AACJ;;AACD,MAAA,MAAI,CAACzJ,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAAC8E,WAA1B,EAAwC,+CAA8CsE,IAAI,CAACmB,GAAL,KAAaD,kBAAmB,WAAUE,yBAA0B,6CAA1J;;AACA,MAAA,MAAI,CAAC9E,cAAL;AArEoB;AAsEvB;;AACDiF,EAAAA,kBAAkB,CAACE,kBAAD,EAAqBC,mBAArB,EAA0CC,WAA1C,EAAuD;AACrE,QAAI;AACA,aAAO,KAAKxJ,gBAAL,CAAsByJ,4BAAtB,CAAmD;AACtDF,QAAAA,mBADsD;AAEtDD,QAAAA,kBAFsD;AAGtDE,QAAAA;AAHsD,OAAnD,CAAP;AAKH,KAND,CAOA,OAAO9G,CAAP,EAAU;AACN,WAAKjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAkC,6CAA4C0H,kBAAmB,KAAIC,mBAAoB,kBAAiB7G,CAAE,IAA5I;;AACA,aAAO,IAAP;AACH;AACJ;;AACDiG,EAAAA,yBAAyB,CAACrI,KAAD,EAAQ;AAC7B,UAAMoJ,SAAS,GAAG,KAAKlJ,UAAvB;AACA,SAAKA,UAAL,GAAkB,EAAlB;AACAmJ,IAAAA,MAAM,CAACC,IAAP,CAAYF,SAAZ,EACKnB,OADL,CACcsB,GAAD,IAAS;AAClB,YAAMhD,QAAQ,GAAG6C,SAAS,CAACG,GAAD,CAA1B;;AACA,UAAI;AACAhD,QAAAA,QAAQ,CAAC,IAAD,EAAOvG,KAAP,CAAR;AACH,OAFD,CAGA,OAAOoC,CAAP,EAAU;AACN,aAAKjD,OAAL,CAAaC,GAAb,CAAiBjB,QAAQ,CAACmD,KAA1B,EAAkC,wCAAuCtB,KAAM,kBAAiB1B,cAAc,CAAC8D,CAAD,CAAI,EAAlH;AACH;AACJ,KATD;AAUH;;AACDiB,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKuE,iBAAT,EAA4B;AACxBhE,MAAAA,YAAY,CAAC,KAAKgE,iBAAN,CAAZ;AACA,WAAKA,iBAAL,GAAyBtF,SAAzB;AACH;AACJ;;AACDY,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKuE,cAAT,EAAyB;AACrB7D,MAAAA,YAAY,CAAC,KAAK6D,cAAN,CAAZ;AACH;AACJ;;AACDjC,EAAAA,iBAAiB,CAACzB,UAAD,EAAaC,IAAb,EAAmBwF,WAAnB,EAAgCtF,SAAhC,EAA2C;AACxD,QAAIsF,WAAJ,EAAiB;AACb,UAAItF,SAAS,CAACoC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,eAAO;AACH8B,UAAAA,SAAS,EAAEpE,IADR;AAEHE,UAAAA,SAFG;AAGH8D,UAAAA,MAAM,EAAEjE,UAHL;AAIHjD,UAAAA,IAAI,EAAE5C,WAAW,CAAC2I;AAJf,SAAP;AAMH,OAPD,MAQK;AACD,eAAO;AACHuB,UAAAA,SAAS,EAAEpE,IADR;AAEHgE,UAAAA,MAAM,EAAEjE,UAFL;AAGHjD,UAAAA,IAAI,EAAE5C,WAAW,CAAC2I;AAHf,SAAP;AAKH;AACJ,KAhBD,MAiBK;AACD,YAAMlC,YAAY,GAAG,KAAKpE,aAA1B;AACA,WAAKA,aAAL;;AACA,UAAI2D,SAAS,CAACoC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,eAAO;AACH8B,UAAAA,SAAS,EAAEpE,IADR;AAEHW,UAAAA,YAAY,EAAEA,YAAY,CAACoE,QAAb,EAFX;AAGH7E,UAAAA,SAHG;AAIH8D,UAAAA,MAAM,EAAEjE,UAJL;AAKHjD,UAAAA,IAAI,EAAE5C,WAAW,CAAC2I;AALf,SAAP;AAOH,OARD,MASK;AACD,eAAO;AACHuB,UAAAA,SAAS,EAAEpE,IADR;AAEHW,UAAAA,YAAY,EAAEA,YAAY,CAACoE,QAAb,EAFX;AAGHf,UAAAA,MAAM,EAAEjE,UAHL;AAIHjD,UAAAA,IAAI,EAAE5C,WAAW,CAAC2I;AAJf,SAAP;AAMH;AACJ;AACJ;;AACDzB,EAAAA,cAAc,CAACnB,OAAD,EAAUK,YAAV,EAAwB;AAClC,QAAIL,OAAO,CAACqC,MAAR,KAAmB,CAAvB,EAA0B;AACtB;AACH,KAHiC,CAIlC;;;AACA,QAAI,CAAChC,YAAL,EAAmB;AACfA,MAAAA,YAAY,GAAG5C,OAAO,CAACc,OAAR,EAAf;AACH,KAPiC,CAQlC;AACA;;;AACA,SAAK,MAAMiH,QAAX,IAAuBxF,OAAvB,EAAgC;AAC5BA,MAAAA,OAAO,CAACwF,QAAD,CAAP,CAAkBC,SAAlB,CAA4B;AACxB1E,QAAAA,QAAQ,EAAE,MAAM;AACZV,UAAAA,YAAY,GAAGA,YAAY,CAACM,IAAb,CAAkB,MAAM,KAAKC,iBAAL,CAAuB,KAAK8E,wBAAL,CAA8BF,QAA9B,CAAvB,CAAxB,CAAf;AACH,SAHuB;AAIxBzJ,QAAAA,KAAK,EAAG4J,GAAD,IAAS;AACZ,cAAIvE,OAAJ;;AACA,cAAIuE,GAAG,YAAYtI,KAAnB,EAA0B;AACtB+D,YAAAA,OAAO,GAAGuE,GAAG,CAACvE,OAAd;AACH,WAFD,MAGK,IAAIuE,GAAG,IAAIA,GAAG,CAACb,QAAf,EAAyB;AAC1B1D,YAAAA,OAAO,GAAGuE,GAAG,CAACb,QAAJ,EAAV;AACH,WAFI,MAGA;AACD1D,YAAAA,OAAO,GAAG,eAAV;AACH;;AACDf,UAAAA,YAAY,GAAGA,YAAY,CAACM,IAAb,CAAkB,MAAM,KAAKC,iBAAL,CAAuB,KAAK8E,wBAAL,CAA8BF,QAA9B,EAAwCpE,OAAxC,CAAvB,CAAxB,CAAf;AACH,SAhBuB;AAiBxBJ,QAAAA,IAAI,EAAGC,IAAD,IAAU;AACZZ,UAAAA,YAAY,GAAGA,YAAY,CAACM,IAAb,CAAkB,MAAM,KAAKC,iBAAL,CAAuB,KAAKgF,wBAAL,CAA8BJ,QAA9B,EAAwCvE,IAAxC,CAAvB,CAAxB,CAAf;AACH;AAnBuB,OAA5B;AAqBH;AACJ;;AACDf,EAAAA,uBAAuB,CAACH,IAAD,EAAO;AAC1B,UAAMC,OAAO,GAAG,EAAhB;AACA,UAAMC,SAAS,GAAG,EAAlB;;AACA,SAAK,IAAI4F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9F,IAAI,CAACsC,MAAzB,EAAiCwD,CAAC,EAAlC,EAAsC;AAClC,YAAMC,QAAQ,GAAG/F,IAAI,CAAC8F,CAAD,CAArB;;AACA,UAAI,KAAKE,aAAL,CAAmBD,QAAnB,CAAJ,EAAkC;AAC9B,cAAMN,QAAQ,GAAG,KAAKlJ,aAAtB;AACA,aAAKA,aAAL,GAF8B,CAG9B;;AACA0D,QAAAA,OAAO,CAACwF,QAAD,CAAP,GAAoBM,QAApB;AACA7F,QAAAA,SAAS,CAAC8B,IAAV,CAAeyD,QAAQ,CAACV,QAAT,EAAf,EAL8B,CAM9B;;AACA/E,QAAAA,IAAI,CAACqC,MAAL,CAAYyD,CAAZ,EAAe,CAAf;AACH;AACJ;;AACD,WAAO,CAAC7F,OAAD,EAAUC,SAAV,CAAP;AACH;;AACD8F,EAAAA,aAAa,CAACC,GAAD,EAAM;AACf;AACA,WAAOA,GAAG,IAAIA,GAAG,CAACP,SAAX,IAAwB,OAAOO,GAAG,CAACP,SAAX,KAAyB,UAAxD;AACH;;AACDrF,EAAAA,uBAAuB,CAACN,UAAD,EAAaC,IAAb,EAAmBE,SAAnB,EAA8B;AACjD,UAAMS,YAAY,GAAG,KAAKpE,aAA1B;AACA,SAAKA,aAAL;;AACA,QAAI2D,SAAS,CAACoC,MAAV,KAAqB,CAAzB,EAA4B;AACxB,aAAO;AACH8B,QAAAA,SAAS,EAAEpE,IADR;AAEHW,QAAAA,YAAY,EAAEA,YAAY,CAACoE,QAAb,EAFX;AAGH7E,QAAAA,SAHG;AAIH8D,QAAAA,MAAM,EAAEjE,UAJL;AAKHjD,QAAAA,IAAI,EAAE5C,WAAW,CAACgM;AALf,OAAP;AAOH,KARD,MASK;AACD,aAAO;AACH9B,QAAAA,SAAS,EAAEpE,IADR;AAEHW,QAAAA,YAAY,EAAEA,YAAY,CAACoE,QAAb,EAFX;AAGHf,QAAAA,MAAM,EAAEjE,UAHL;AAIHjD,QAAAA,IAAI,EAAE5C,WAAW,CAACgM;AAJf,OAAP;AAMH;AACJ;;AACDxF,EAAAA,uBAAuB,CAACyF,EAAD,EAAK;AACxB,WAAO;AACHxF,MAAAA,YAAY,EAAEwF,EADX;AAEHrJ,MAAAA,IAAI,EAAE5C,WAAW,CAACkM;AAFf,KAAP;AAIH;;AACDP,EAAAA,wBAAwB,CAACM,EAAD,EAAKjF,IAAL,EAAW;AAC/B,WAAO;AACHP,MAAAA,YAAY,EAAEwF,EADX;AAEHjF,MAAAA,IAFG;AAGHpE,MAAAA,IAAI,EAAE5C,WAAW,CAAC6I;AAHf,KAAP;AAKH;;AACD4C,EAAAA,wBAAwB,CAACQ,EAAD,EAAKnK,KAAL,EAAY2F,MAAZ,EAAoB;AACxC,QAAI3F,KAAJ,EAAW;AACP,aAAO;AACHA,QAAAA,KADG;AAEH2E,QAAAA,YAAY,EAAEwF,EAFX;AAGHrJ,QAAAA,IAAI,EAAE5C,WAAW,CAAC6G;AAHf,OAAP;AAKH;;AACD,WAAO;AACHJ,MAAAA,YAAY,EAAEwF,EADX;AAEHxE,MAAAA,MAFG;AAGH7E,MAAAA,IAAI,EAAE5C,WAAW,CAAC6G;AAHf,KAAP;AAKH;;AA5yBsB","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport var HubConnectionState;\r\n(function (HubConnectionState) {\r\n    /** The hub connection is disconnected. */\r\n    HubConnectionState[\"Disconnected\"] = \"Disconnected\";\r\n    /** The hub connection is connecting. */\r\n    HubConnectionState[\"Connecting\"] = \"Connecting\";\r\n    /** The hub connection is connected. */\r\n    HubConnectionState[\"Connected\"] = \"Connected\";\r\n    /** The hub connection is disconnecting. */\r\n    HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\r\n    /** The hub connection is reconnecting. */\r\n    HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\r\n})(HubConnectionState || (HubConnectionState = {}));\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    constructor(connection, logger, protocol, reconnectPolicy) {\r\n        this._nextKeepAlive = 0;\r\n        this._freezeEventListener = () => {\r\n            this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n        };\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n        this.connection.onreceive = (data) => this._processIncomingData(data);\r\n        this.connection.onclose = (error) => this._connectionClosed(error);\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    static create(connection, logger, protocol, reconnectPolicy) {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state() {\r\n        return this._connectionState;\r\n    }\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId() {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl() {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n        this.connection.baseUrl = url;\r\n    }\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    start() {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n    async _startWithStateTransitions() {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n        try {\r\n            await this._startInternal();\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        }\r\n        catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n        await this.connection.start(this._protocol.transferFormat);\r\n        try {\r\n            const handshakeRequest = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n            await handshakePromise;\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    async stop() {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n    _stopInternal(error) {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    stream(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue;\r\n        const subject = new Subject();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n            else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    }\r\n                    else {\r\n                        subject.complete();\r\n                    }\r\n                }\r\n                else {\r\n                    subject.next((invocationEvent.item));\r\n                }\r\n            }\r\n        };\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n            subject.error(e);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n        });\r\n        this._launchStreams(streams, promiseQueue);\r\n        return subject;\r\n    }\r\n    _sendMessage(message) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    _sendWithProtocol(message) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    send(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n        this._launchStreams(streams, sendPromise);\r\n        return sendPromise;\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    invoke(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n        const p = new Promise((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        }\r\n                        else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    }\r\n                    else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                reject(e);\r\n                // invocationId will always have a value for a non-blocking invocation\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n        return p;\r\n    }\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    on(methodName, newMethod) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n    off(methodName, method) {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            delete this._methods[methodName];\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    onclose(callback) {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    onreconnecting(callback) {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    onreconnected(callback) {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n    _processIncomingData(data) {\r\n        this._cleanupTimeout();\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            }\r\n                            catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        }\r\n                        else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this._resetTimeoutPeriod();\r\n    }\r\n    _processHandshakeResponse(data) {\r\n        let responseMessage;\r\n        let remainingData;\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        }\r\n        catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n    _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n        this._cleanupPingTimer();\r\n    }\r\n    _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined) {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        }\r\n                        catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n    _invokeClientMethod(invocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n    _connectionClosed(error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n    _completeClose(error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    async _reconnect(error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n            try {\r\n                await this._startInternal();\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    }\r\n                    catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n        this._completeClose();\r\n    }\r\n    _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\r\n        try {\r\n            return this._reconnectPolicy.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n    _cancelCallbacksWithError(error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n            const callback = callbacks[key];\r\n            try {\r\n                callback(null, error);\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n            }\r\n        });\r\n    }\r\n    _cleanupPingTimer() {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n    _cleanupTimeout() {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n    _createInvocation(methodName, args, nonblocking, streamIds) {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    _launchStreams(streams, promiseQueue) {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    }\r\n                    else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    }\r\n                    else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n    _replaceStreamingParams(args) {\r\n        const streams = [];\r\n        const streamIds = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n        return [streams, streamIds];\r\n    }\r\n    _isObservable(arg) {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n    _createStreamInvocation(methodName, args, streamIds) {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n    _createCancelInvocation(id) {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n    _createStreamItemMessage(id, item) {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n    _createCompletionMessage(id, error, result) {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}